Problem Link: https://leetcode.com/problems/word-search/



bool backtrack(vector<vector<char>>&board,vector<vector<bool>> &visited ,string word,int idx,
                  int i,int j){
        int row=board.size() ,col= board[0].size() , word_len=word.size();
        
        if( idx==word_len  ) return true;
        
        if( i<0 or i>row-1 or j<0 or j>col-1 or visited[i][j] or board[i][j]!=word[idx]) return false;
        
        // if(j==col) return backtrack(board,visited,word,idx,i+1,j);
        visited[i][j]=true;
        bool up=backtrack(board,visited,word,idx+1,i-1,j);//UP
        bool down=backtrack(board,visited,word,idx+1,i+1,j);//DOWN
        bool left=backtrack(board,visited,word,idx+1,i,j-1);//LEFT
        bool right=backtrack(board,visited,word,idx+1,i,j+1);//RIGHT
        if(up or down or left or right )       return true;
        visited[i][j]=false;
        return false;
        
    }
    
    
public:
    bool exist(vector<vector<char>>& board, string word) {
        int row=board.size(),col=board[0].size();
        vector<vector<bool > > visited( row ,vector<bool> (col,false) ); 
        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++) if( backtrack(board , visited,word,0,i,j) ) return true;
        }
        return false;
    }
